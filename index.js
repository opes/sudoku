// This code has been (mostly) generated by ChatGPT.
// Minor modifications were made to provide ES6 syntax (let/const)
// and use true equality operators (== -> ===)
// That's about it.

function solveSudoku(grid) {
  // Find the next empty cell in the puzzle
  const emptyCell = findEmptyCell(grid);

  // If there are no more empty cells, the puzzle is solved
  if (!emptyCell) {
    return true;
  }

  // Try each possible value for the empty cell
  for (let i = 1; i <= 9; i++) {
    // If the value is valid for the empty cell, fill it in and
    // try to solve the rest of the puzzle
    if (isValidValue(grid, emptyCell, i)) {
      grid[emptyCell.row][emptyCell.col] = i;
      if (solveSudoku(grid)) {
        return true;
      }
    }
  }

  // If none of the values work, backtrack and try a different value
  grid[emptyCell.row][emptyCell.col] = 0;
  return false;
}

function findEmptyCell(grid) {
  // Search the grid for the next empty cell
  for (let i = 0; i < 9; i++) {
    for (let j = 0; j < 9; j++) {
      if (grid[i][j] === 0) {
        return { row: i, col: j };
      }
    }
  }

  // If there are no more empty cells, return null
  return null;
}

function isValidValue(grid, cell, value) {
  // Check if the value is already used in the row
  for (let i = 0; i < 9; i++) {
    if (grid[cell.row][i] === value) {
      return false;
    }
  }

  // Check if the value is already used in the column
  for (let i = 0; i < 9; i++) {
    if (grid[i][cell.col] === value) {
      return false;
    }
  }

  // Check if the value is already used in the 3x3 block
  const blockRow = Math.floor(cell.row / 3) * 3;
  const blockCol = Math.floor(cell.col / 3) * 3;
  for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 3; j++) {
      if (grid[blockRow + i][blockCol + j] === value) {
        return false;
      }
    }
  }

  // If the value is not used in the row, column, or block, it is valid
  return true;
}

// This example input was even generated by ChatGPT...
const puzzle = [
  [5, 3, 0, 0, 7, 0, 0, 0, 0],
  [6, 0, 0, 1, 9, 5, 0, 0, 0],
  [0, 9, 8, 0, 0, 0, 0, 6, 0],
  [8, 0, 0, 0, 6, 0, 0, 0, 3],
  [4, 0, 0, 8, 0, 3, 0, 0, 1],
  [7, 0, 0, 0, 2, 0, 0, 0, 6],
  [0, 6, 0, 0, 0, 0, 2, 8, 0],
  [0, 0, 0, 4, 1, 9, 0, 0, 5],
  [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

console.log(solveSudoku(puzzle));
console.table(puzzle);
